// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package gotrix

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type catalogTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *catalogTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("catalogs").
func (v *catalogTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *catalogTableType) Columns() []string {
	return []string{"catalog_id", "catalog_name", "created_at", "updated_at"}
}

// NewStruct makes a new struct for that view or table.
func (v *catalogTableType) NewStruct() reform.Struct {
	return new(Catalog)
}

// NewRecord makes a new record for that table.
func (v *catalogTableType) NewRecord() reform.Record {
	return new(Catalog)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *catalogTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// CatalogTable represents catalogs view or table in SQL database.
var CatalogTable = &catalogTableType{
	s: parse.StructInfo{Type: "Catalog", SQLSchema: "", SQLName: "catalogs", Fields: []parse.FieldInfo{{Name: "CatalogID", Type: "string", Column: "catalog_id"}, {Name: "CatalogName", Type: "string", Column: "catalog_name"}, {Name: "CreatedAt", Type: "time.Time", Column: "created_at"}, {Name: "UpdatedAt", Type: "time.Time", Column: "updated_at"}}, PKFieldIndex: 0},
	z: new(Catalog).Values(),
}

// String returns a string representation of this struct or record.
func (s Catalog) String() string {
	res := make([]string, 4)
	res[0] = "CatalogID: " + reform.Inspect(s.CatalogID, true)
	res[1] = "CatalogName: " + reform.Inspect(s.CatalogName, true)
	res[2] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	res[3] = "UpdatedAt: " + reform.Inspect(s.UpdatedAt, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Catalog) Values() []interface{} {
	return []interface{}{
		s.CatalogID,
		s.CatalogName,
		s.CreatedAt,
		s.UpdatedAt,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Catalog) Pointers() []interface{} {
	return []interface{}{
		&s.CatalogID,
		&s.CatalogName,
		&s.CreatedAt,
		&s.UpdatedAt,
	}
}

// View returns View object for that struct.
func (s *Catalog) View() reform.View {
	return CatalogTable
}

// Table returns Table object for that record.
func (s *Catalog) Table() reform.Table {
	return CatalogTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Catalog) PKValue() interface{} {
	return s.CatalogID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Catalog) PKPointer() interface{} {
	return &s.CatalogID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Catalog) HasPK() bool {
	return s.CatalogID != CatalogTable.z[CatalogTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *Catalog) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.CatalogID = string(i64)
	} else {
		s.CatalogID = pk.(string)
	}
}

// check interfaces
var (
	_ reform.View   = CatalogTable
	_ reform.Struct = (*Catalog)(nil)
	_ reform.Table  = CatalogTable
	_ reform.Record = (*Catalog)(nil)
	_ fmt.Stringer  = (*Catalog)(nil)
)

type catalogItemTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *catalogItemTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("catalog_items").
func (v *catalogItemTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *catalogItemTableType) Columns() []string {
	return []string{"item_id", "catalog_id", "item_name", "created_at", "updated_at"}
}

// NewStruct makes a new struct for that view or table.
func (v *catalogItemTableType) NewStruct() reform.Struct {
	return new(CatalogItem)
}

// NewRecord makes a new record for that table.
func (v *catalogItemTableType) NewRecord() reform.Record {
	return new(CatalogItem)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *catalogItemTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// CatalogItemTable represents catalog_items view or table in SQL database.
var CatalogItemTable = &catalogItemTableType{
	s: parse.StructInfo{Type: "CatalogItem", SQLSchema: "", SQLName: "catalog_items", Fields: []parse.FieldInfo{{Name: "ItemID", Type: "string", Column: "item_id"}, {Name: "CatalogID", Type: "string", Column: "catalog_id"}, {Name: "ItemName", Type: "string", Column: "item_name"}, {Name: "CreatedAt", Type: "time.Time", Column: "created_at"}, {Name: "UpdatedAt", Type: "time.Time", Column: "updated_at"}}, PKFieldIndex: 0},
	z: new(CatalogItem).Values(),
}

// String returns a string representation of this struct or record.
func (s CatalogItem) String() string {
	res := make([]string, 5)
	res[0] = "ItemID: " + reform.Inspect(s.ItemID, true)
	res[1] = "CatalogID: " + reform.Inspect(s.CatalogID, true)
	res[2] = "ItemName: " + reform.Inspect(s.ItemName, true)
	res[3] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	res[4] = "UpdatedAt: " + reform.Inspect(s.UpdatedAt, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *CatalogItem) Values() []interface{} {
	return []interface{}{
		s.ItemID,
		s.CatalogID,
		s.ItemName,
		s.CreatedAt,
		s.UpdatedAt,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *CatalogItem) Pointers() []interface{} {
	return []interface{}{
		&s.ItemID,
		&s.CatalogID,
		&s.ItemName,
		&s.CreatedAt,
		&s.UpdatedAt,
	}
}

// View returns View object for that struct.
func (s *CatalogItem) View() reform.View {
	return CatalogItemTable
}

// Table returns Table object for that record.
func (s *CatalogItem) Table() reform.Table {
	return CatalogItemTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *CatalogItem) PKValue() interface{} {
	return s.ItemID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *CatalogItem) PKPointer() interface{} {
	return &s.ItemID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *CatalogItem) HasPK() bool {
	return s.ItemID != CatalogItemTable.z[CatalogItemTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *CatalogItem) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ItemID = string(i64)
	} else {
		s.ItemID = pk.(string)
	}
}

// check interfaces
var (
	_ reform.View   = CatalogItemTable
	_ reform.Struct = (*CatalogItem)(nil)
	_ reform.Table  = CatalogItemTable
	_ reform.Record = (*CatalogItem)(nil)
	_ fmt.Stringer  = (*CatalogItem)(nil)
)

type catalogItemPropertyTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *catalogItemPropertyTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("catalog_item_properties").
func (v *catalogItemPropertyTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *catalogItemPropertyTableType) Columns() []string {
	return []string{"property_id", "item_id", "catalog_id", "property_key", "property_value", "created_at", "updated_at"}
}

// NewStruct makes a new struct for that view or table.
func (v *catalogItemPropertyTableType) NewStruct() reform.Struct {
	return new(CatalogItemProperty)
}

// NewRecord makes a new record for that table.
func (v *catalogItemPropertyTableType) NewRecord() reform.Record {
	return new(CatalogItemProperty)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *catalogItemPropertyTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// CatalogItemPropertyTable represents catalog_item_properties view or table in SQL database.
var CatalogItemPropertyTable = &catalogItemPropertyTableType{
	s: parse.StructInfo{Type: "CatalogItemProperty", SQLSchema: "", SQLName: "catalog_item_properties", Fields: []parse.FieldInfo{{Name: "PropertyID", Type: "string", Column: "property_id"}, {Name: "ItemID", Type: "string", Column: "item_id"}, {Name: "CatalogID", Type: "string", Column: "catalog_id"}, {Name: "PropertyKey", Type: "string", Column: "property_key"}, {Name: "PropertyValue", Type: "string", Column: "property_value"}, {Name: "CreatedAt", Type: "time.Time", Column: "created_at"}, {Name: "UpdatedAt", Type: "time.Time", Column: "updated_at"}}, PKFieldIndex: 0},
	z: new(CatalogItemProperty).Values(),
}

// String returns a string representation of this struct or record.
func (s CatalogItemProperty) String() string {
	res := make([]string, 7)
	res[0] = "PropertyID: " + reform.Inspect(s.PropertyID, true)
	res[1] = "ItemID: " + reform.Inspect(s.ItemID, true)
	res[2] = "CatalogID: " + reform.Inspect(s.CatalogID, true)
	res[3] = "PropertyKey: " + reform.Inspect(s.PropertyKey, true)
	res[4] = "PropertyValue: " + reform.Inspect(s.PropertyValue, true)
	res[5] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	res[6] = "UpdatedAt: " + reform.Inspect(s.UpdatedAt, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *CatalogItemProperty) Values() []interface{} {
	return []interface{}{
		s.PropertyID,
		s.ItemID,
		s.CatalogID,
		s.PropertyKey,
		s.PropertyValue,
		s.CreatedAt,
		s.UpdatedAt,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *CatalogItemProperty) Pointers() []interface{} {
	return []interface{}{
		&s.PropertyID,
		&s.ItemID,
		&s.CatalogID,
		&s.PropertyKey,
		&s.PropertyValue,
		&s.CreatedAt,
		&s.UpdatedAt,
	}
}

// View returns View object for that struct.
func (s *CatalogItemProperty) View() reform.View {
	return CatalogItemPropertyTable
}

// Table returns Table object for that record.
func (s *CatalogItemProperty) Table() reform.Table {
	return CatalogItemPropertyTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *CatalogItemProperty) PKValue() interface{} {
	return s.PropertyID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *CatalogItemProperty) PKPointer() interface{} {
	return &s.PropertyID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *CatalogItemProperty) HasPK() bool {
	return s.PropertyID != CatalogItemPropertyTable.z[CatalogItemPropertyTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *CatalogItemProperty) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.PropertyID = string(i64)
	} else {
		s.PropertyID = pk.(string)
	}
}

// check interfaces
var (
	_ reform.View   = CatalogItemPropertyTable
	_ reform.Struct = (*CatalogItemProperty)(nil)
	_ reform.Table  = CatalogItemPropertyTable
	_ reform.Record = (*CatalogItemProperty)(nil)
	_ fmt.Stringer  = (*CatalogItemProperty)(nil)
)

func init() {
	parse.AssertUpToDate(&CatalogTable.s, new(Catalog))
	parse.AssertUpToDate(&CatalogItemTable.s, new(CatalogItem))
	parse.AssertUpToDate(&CatalogItemPropertyTable.s, new(CatalogItemProperty))
}
