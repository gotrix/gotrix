package components

import (
	"text/template"
)

type wrapTemplateData struct {
	Hash     string
	Package  string
	Template string
	AsyncCSS filesList
	CSS      filesList
	AsyncJS  filesList
	DeferJS  filesList
	JS       filesList
}

var (
	wrapTemplate = template.Must(template.New("tpl").Parse(`// Code generated by github.com/gotrix/gotrix/cli. DO NOT EDIT.
package main

import (
	template "text/template"
	gotrix "github.com/gotrix/gotrix"
	component "{{ .Package }}"
)

// Component (exported).
//goland:noinspection GoUnusedGlobalVariable
var Component = componentWrapper{
	c: new(component.Component),
	t: template.Must(template.New("{{.Hash}}").Parse(` + "`" + `{{.Template}}` + "`" + `)),
}

type componentWrapper struct{
	c gotrix.Component
	t *template.Template
}

// Include the component. Implements gotrix.ComponentWrapper.
func (w *componentWrapper) Include(ctx gotrix.Context, params gotrix.ComponentParams) error {
	res, err := w.c.Component(ctx, params)
	if err != nil {
		return err
	}
	for k, v := range res {
		ctx.SetData(k, v)
	}
	if err := w.t.Execute(ctx.Writer(), ctx);err != nil {
		return err
	}
	ctx.AddAsyncJS({{.AsyncJS}}...)
	ctx.AddDeferJS({{.DeferJS}}...)
	ctx.AddJS({{.JS}}...)
	ctx.AddAsyncCSS({{.AsyncCSS}}...)
	ctx.AddCSS({{.CSS}}...)
	return nil
}
`))
)
